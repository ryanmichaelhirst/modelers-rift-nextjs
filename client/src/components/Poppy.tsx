/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { useFrame } from '@react-three/fiber'
import poppy from '../assets/poppy.glb'

type GLTFResult = GLTF & {
  nodes: {
    Mesh_0: THREE.SkinnedMesh
    Root: THREE.Bone
    C_Buffbone_Glb_Layout_Loc: THREE.Bone
    C_Buffbone_Glb_Center_Loc: THREE.Bone
    Buffbone_Glb_Ground_Loc: THREE.Bone
    C_Buffbone_Glb_Overhead_Loc: THREE.Bone
    Buffbone_Glb_Channel_Loc: THREE.Bone
    C_Buffbone_Cstm_Healthbar_Loc: THREE.Bone
    Snap_Weapon2World: THREE.Bone
  }
  materials: {
    Poppy_Mat: THREE.MeshBasicMaterial
  }
}

type ActionName =
  | 'poppy_attack1'
  | 'poppy_attack2'
  | 'poppy_attack3'
  | 'poppy_channel'
  | 'poppy_channel_windup'
  | 'poppy_crit'
  | 'poppy_dance'
  | 'poppy_death'
  | 'poppy_idle1'
  | 'poppy_idle2'
  | 'poppy_idle_to_dance'
  | 'poppy_idlein'
  | 'poppy_joke01'
  | 'poppy_joke02'
  | 'poppy_joke03'
  | 'poppy_laugh'
  | 'poppy_passive_to_idle'
  | 'poppy_recall'
  | 'poppy_respawn'
  | 'poppy_run_fast'
  | 'poppy_run_homeguard'
  | 'poppy_run'
  | 'poppy_spell1'
  | 'poppy_spell1_to_idle'
  | 'poppy_spell1_to_run'
  | 'poppy_spell2_to_idle'
  | 'poppy_spell2_to_run'
  | 'poppy_spell3'
  | 'poppy_spell4_charged'
  | 'poppy_spell4_charged_to_idle'
  | 'poppy_spell4_charged_to_run'
  | 'poppy_spell4_instant'
  | 'poppy_spell4_runcharging'
  | 'poppy_spell4_windup'
  | 'poppy_taunt'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF(poppy) as GLTFResult
  const { actions } = useAnimations(animations, group)
  const poppyActions = actions as GLTFActions

  useFrame(({ clock }) => {
    const a = clock.getElapsedTime()
    // @ts-ignore
    group.current.rotation.y = a * 0.3
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI, 0, 0]} scale={[-1, -1, -1]}>
        <primitive object={nodes.Root} />
        <primitive object={nodes.C_Buffbone_Glb_Layout_Loc} />
        <primitive object={nodes.C_Buffbone_Glb_Center_Loc} />
        <primitive object={nodes.Buffbone_Glb_Ground_Loc} />
        <primitive object={nodes.C_Buffbone_Glb_Overhead_Loc} />
        <primitive object={nodes.Buffbone_Glb_Channel_Loc} />
        <primitive object={nodes.C_Buffbone_Cstm_Healthbar_Loc} />
        <primitive object={nodes.Snap_Weapon2World} />
        <skinnedMesh
          geometry={nodes.Mesh_0.geometry}
          material={materials.Poppy_Mat}
          skeleton={nodes.Mesh_0.skeleton}
        />
      </group>
    </group>
  )
}

useGLTF.preload(poppy)
